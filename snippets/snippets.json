{
    "Assignments": {
        "Let assignment": {
            "prefix": "la",
            "body": "let ${1:name} = ${2:value}"
        },
        "Var assignment": {
            "prefix": "va",
            "body": "var ${1:name} = ${2:value}"
        },
        "Const assignment": {
            "prefix": "ca",
            "body": "const ${1:name} = ${2:value}"
        },
        "Object assignment": {
            "prefix": "oa",
            "body": [
                "let ${1:name} = {",
                "   \"${2:key}\": ${3:value}",
                "}"
            ]
        },
        "Array assignment": {
            "prefix": "aa",
            "body": "let ${1:name} = [${2:value1}, ${3:value2}]"
        }
    },
    "Functions": {
        "Arrow function": {
            "prefix": "af",
            "body": "const ${1:name} = (${2:param}) => {\n\t${0}\n}"
        },
        "Named function": {
            "prefix": "nf",
            "body": "function ${1:name} (${2:param}) {\n\t${0}\n}"
        }
    },
    "Conditions": { 
        "Equal condition": {
            "prefix": "ec",
            "body": "${1:value1} === ${2:value2}"
        },
        "Not equal condition": {
            "prefix": "nec",
            "body": "${1:value1} !== ${2:value2}"
        },
        "Greater than condition": {
            "prefix": "gtc",
            "body": "${1:value1} > ${2:value2}"
        },
        "Less than condition": {
            "prefix": "ltc",
            "body": "${1:value1} < ${2:value2}"
        },
        "Greater equal than condition": {
            "prefix": "getc",
            "body": "${1:value1} >= ${2:value2}"
        },
        "Less equal than condition": {
            "prefix": "letc",
            "body": "${1:value1} <= ${2:value2}"
        },
        "Or condition": {
            "prefix": "oc",
            "body": "${1:condition1} || ${2:condition2}"
        },
        "And condition": {
            "prefix": "ac",
            "body": "${1:condition1} && ${2:condition2}"
        },
        "Condition operator": {
            "prefix": "co",
            "body": "let ${1:name} = ${2:condition} ? ${3:value1} : ${4:value2}"
        }
    },
    "Validations": {
        "Zero length validation": {
            "prefix": "zlv",
            "body": "${1:value}.length === 0"
        },
        "Positive length validation": {
            "prefix": "plv",
            "body": "${1:value}.length > 0"
        },
        "Empty string validation": {
            "prefix": "esv",
            "body": "${1:value} === \"\""
        },
        "Not empty string validation": {
            "prefix": "nesv",
            "body": "${1:value} !== \"\""
        },
        "Null validation": {
            "prefix": "nv",
            "body": "${1:value} === null"
        },
        "Not null validation": {
            "prefix": "nnv",
            "body": "${1:value} !== null"
        },
        "Undefined validation": {
            "prefix": "uv",
            "body": "typeof ${1:value} === \"undefined\""
        },
        "Not undefined validation": {
            "prefix": "nuv",
            "body": "typeof ${1:value} !== \"undefined\""
        },
        "Instance of validation": {
            "prefix": "iov",
            "body": "${1:value1} instanceof ${2:value2}"
        },
        "Array validation": {
            "prefix": "av", 
            "body": "Array.isArray(${1:value}) || ${1:value}.length"
        },
        "Object validation": {
            "prefix": "ov", 
            "body": "Object.keys(${1:value}).length === 0 && ${1:value}.constructor === Object"
        },
        "Contains validation": {
            "prefix": "cv",
            "body": "${1:value1}.indexOf(${2:value2}) > -1"
        },
        "Doesn't contain validation": {
            "prefix": "dcv",
            "body": "${1:value1}.indexOf(${2:value2}) === -1"
        }
    },
    "DOM manipulations": {
        "Add event listener": {
            "prefix": "ael",
            "body": "document.addEventListener(\"${1:event}\", (${2:param}) => {\n\t${0}\n})"
        },
        "Remove event listener": {
            "prefix": "rel",
            "body": "document.removeEventListener(\"${1:event}\", (${2:param}) => {\n\t${0}\n})"
        },
        "Create element": {
            "prefix": "cel",
            "body": "document.createElement(\"${1:value}\")"
        },
        "Append child": {
            "prefix": "ach",
            "body": "document.appendChild(\"${1:value}\")"
        },
        "Remove child": {
            "prefix": "rch",
            "body": "document.removeChild(\"${1:value}\")"
        },
        "Get element by id": {
            "prefix": "gei",
            "body": "document.getElementById(\"${1:value}\")"
        },
        "Get elements by class name": {
            "prefix": "gec",
            "body": "document.getElementsByClassName(\"${1:value}\")"
        },
        "Get elements by tag name": {
            "prefix": "get",
            "body": "document.getElementsByTagName(\"${1:value}\")"
        },
        "Query selector": {
            "prefix": "qs",
            "body": "document.querySelector(\"${1:value}\")"
        },
        "Query selector all": {
            "prefix": "qsa",
            "body": "document.querySelectorAll(\"${1:value}\")"
        }
    },
    "Console": {
        "Console log": {
            "prefix": "cl",
            "body": "console.log(${1:value})"
        },
        "Console warn": {
            "prefix": "cw",
            "body": "console.warn(${1:value})"
        },
        "Console error": {
            "prefix": "ce",
            "body": "console.error(${1:value})"
        }
    },
    "Destructuring": {
        "Object destructuring": {
            "prefix": "od",
            "body": "let { ${1:value1} } = ${2:value2}"
        },
        "Array destructuring": {
            "prefix": "ad", 
            "body": "let [${1:value1}, ${2:value2}] = ${3:value3}"
        }
    },
    "Others": {
        "React bind this": {
            "prefix": "rbt",
            "body": "this.${1:name} = this.${1:name}.bind(this)"
        },
        "Clone array": {
            "prefix": "car",
            "body": "let ${1:name} = ...${2:value}"
        },
        "Placeholder": {
            "prefix": "ph1",
            "body": "`${${1:value}}`"
        },
        "Placeholder2": {
            "prefix": "ph2",
            "body": "`${${1:value1}} ${${2:value2}}`"
        },
        "Placeholder3": {
            "prefix": "ph3",
            "body": "`${${1:value1}} ${${2:value2}} ${${3:value3}}`"
        }
    }
}